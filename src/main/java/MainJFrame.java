/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.time.Duration;
import java.time.Instant;
import java.io.File;
/**
 *
 * @author luketomlinson
 */
public class MainJFrame extends JFrame {
    FileChooserDemo fcd = new FileChooserDemo();
        //Create a file chooser
    final JFileChooser fc = new JFileChooser();
        //In response to a button click:
    
    private int time = 1;    //always have the threads run at least their default time unless we change the value
    public boolean pause = true;    //default value should start program in paused state in order to change the time dilation
    
    ArrayList<Process> proList;
    ArrayList<Process> proQueue1 = new ArrayList<>(); //create a new queue
    ArrayList<Process> proQueue2 = new ArrayList<>(); //create a new queue

    // models for all tables
    DefaultTableModel waitingProcesses_dtm_cpu1 = new DefaultTableModel(0, 0); 
    DefaultTableModel completedProcesses_dtm_cpu2 = new DefaultTableModel(0, 0);
    DefaultTableModel waitingProcesses_dtm_cpu2 = new DefaultTableModel(0, 0);
    DefaultTableModel completedProcesses_dtm_cpu1 = new DefaultTableModel(0, 0);
    
    CPU cpu1 = new CPU(0, this, proQueue1);
    CPU cpu2 = new CPU(1, this, proQueue2);
    
    private int startButtonCounter = 0; // keep a count on how many times the start button has been pushed
    int processCounter = 0; // keep a count of how many processes have been ran
    int timeRunning = 0; // keep a count of how many time units the program has been running
    
    private String file = "";
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        
        // headers for the waiting table
        String header[] = new String[]{"Process Name", "Service Time"};
        // add header in table model     
        waitingProcesses_dtm_cpu1.setColumnIdentifiers(header);
        waitingProcesses_dtm_cpu2.setColumnIdentifiers(header);
        
        //set model into the table object
        queueTable_cpu1.setModel(waitingProcesses_dtm_cpu1);
        queueTable_cpu2.setModel(waitingProcesses_dtm_cpu2);
        
        // headers for the finished table
        String another_header[] = new String[]{"Process Name", "Arrival Time", "Service Time", "Finish Time", "TAT", "nTAT"};
        // add header in table model     
        completedProcesses_dtm_cpu2.setColumnIdentifiers(another_header);
        completedProcesses_dtm_cpu1.setColumnIdentifiers(another_header);
        
        //set model into the table object
        completedProcesses_cpu2.setModel(completedProcesses_dtm_cpu2);
        completedProcesses_cpu1.setModel(completedProcesses_dtm_cpu1);
        
        currentSystemState.setText("System Paused");

    }

    public void loadIT() {
        FileInput reader = new FileInput(); //create a new input reader instance
        //must change first string in following line to match the directory that this file lies in for your project
        reader.setFileSource(file); //pass it the local csv file, we can change this later anytime
        try {
            reader.readFile(reader.getFileSource());//read the currently loaded filed
        } catch (Exception ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        proList = reader.getProcessList(); //create an arrayList of processes
        
        proQueue1 = proList; //set the queue to be equal to the linked list read in from .csv file
        proQueue2 = proList; //set the queue to be equal to the linked list read in from .csv file

        // add each process to the queue table
        for (Process P : proQueue1) {
            P.setTimeUnit(this.time);
        }
        
        // set the two cpu labels
        CPU_Label1.setText("CPU 1");
        CPU_Label2.setText("CPU 2");

        // create a new controller
        cpu1 = new CPU(0, this, proQueue1);
        cpu2 = new CPU(1, this, proQueue1);
        
        for (Process P : proQueue1) {
            waitingProcesses_dtm_cpu1.addRow(new Object[]{P.getProcessID(), P.getServiceTime()});
            waitingProcesses_dtm_cpu2.addRow(new Object[]{P.getProcessID(), P.getServiceTime()});
        }
        
        // start the cpus
        cpu2.start();
        cpu1.start();

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        CPU_Label = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        currentSystemState = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queueTable_cpu1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        cpu1Information = new javax.swing.JPanel();
        cpu1processExecuting = new javax.swing.JLabel();
        cpu1timeRemainingLabel = new javax.swing.JLabel();
        CPU_Label1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        waitingProcessQueueLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        completedProcesses_cpu2 = new javax.swing.JTable();
        currentnTAT_cpu1 = new javax.swing.JLabel();
        uploadFileButton = new javax.swing.JButton();
        waitingProcessQueueLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        queueTable_cpu2 = new javax.swing.JTable();
        cpu2Information = new javax.swing.JPanel();
        cpu2processExecuting = new javax.swing.JLabel();
        CPU_Label2 = new javax.swing.JLabel();
        cpu2timeRemainingLabel = new javax.swing.JLabel();
        timeUnitLabel_ms = new javax.swing.JLabel();
        timeUnitTextField = new javax.swing.JTextField();
        timeUnitLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        completedProcesses_cpu1 = new javax.swing.JTable();
        errorMessage = new javax.swing.JLabel();
        currentnTAT_cpu2 = new javax.swing.JLabel();
        quantumInput = new javax.swing.JTextField();
        quantumLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setBackground(new java.awt.Color(169, 199, 219));
        startButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        startButton.setText("Start System");
        startButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        startButton.setBorderPainted(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        pauseButton.setBackground(new java.awt.Color(169, 199, 219));
        pauseButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        pauseButton.setText("Pause System");
        pauseButton.setAutoscrolls(true);
        pauseButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pauseButton.setBorderPainted(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        currentSystemState.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        currentSystemState.setText("System Running");

        queueTable_cpu1.setBackground(new java.awt.Color(204, 204, 204));
        queueTable_cpu1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        queueTable_cpu1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Process A", "10"},
                {"Process B", "4"},
                {null, null},
                {null, null}
            },
            new String [] {
                "Process Name", "Service Time"
            }
        ));
        queueTable_cpu1.setGridColor(new java.awt.Color(0, 0, 0));
        queueTable_cpu1.setRowHeight(40);
        queueTable_cpu1.setShowGrid(true);
        jScrollPane1.setViewportView(queueTable_cpu1);

        cpu1Information.setBackground(new java.awt.Color(255, 255, 153));
        cpu1Information.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        CPU_Label1.setText("CPU1 (HRRN)");

        javax.swing.GroupLayout cpu1InformationLayout = new javax.swing.GroupLayout(cpu1Information);
        cpu1Information.setLayout(cpu1InformationLayout);
        cpu1InformationLayout.setHorizontalGroup(
            cpu1InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpu1InformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cpu1InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CPU_Label1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(cpu1timeRemainingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(cpu1processExecuting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cpu1InformationLayout.setVerticalGroup(
            cpu1InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpu1InformationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CPU_Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpu1processExecuting, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpu1timeRemainingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cpu1Information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(cpu1Information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        waitingProcessQueueLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        waitingProcessQueueLabel.setText("Waiting Process Queue");

        completedProcesses_cpu2.setBackground(new java.awt.Color(204, 204, 204));
        completedProcesses_cpu2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        completedProcesses_cpu2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Process Name", "Arrival Time", "Service Time", "Finish Time", "TAT", "nTAT"
            }
        ));
        completedProcesses_cpu2.setGridColor(new java.awt.Color(0, 0, 0));
        completedProcesses_cpu2.setRowHeight(30);
        jScrollPane2.setViewportView(completedProcesses_cpu2);

        currentnTAT_cpu1.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        currentnTAT_cpu1.setText("Current Average nTAT:");

        uploadFileButton.setText("Upload File");
        uploadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileButtonActionPerformed(evt);
            }
        });

        waitingProcessQueueLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        waitingProcessQueueLabel1.setText("Waiting Process Queue");

        queueTable_cpu2.setBackground(new java.awt.Color(204, 204, 204));
        queueTable_cpu2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        queueTable_cpu2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Process A", "10"},
                {"Process B", "4"},
                {null, null},
                {null, null}
            },
            new String [] {
                "Process Name", "Service Time"
            }
        ));
        queueTable_cpu2.setGridColor(new java.awt.Color(0, 0, 0));
        queueTable_cpu2.setRowHeight(40);
        queueTable_cpu2.setShowGrid(true);
        jScrollPane3.setViewportView(queueTable_cpu2);

        cpu2Information.setBackground(new java.awt.Color(255, 255, 153));
        cpu2Information.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        CPU_Label2.setText("CPU2 (RR)");

        javax.swing.GroupLayout cpu2InformationLayout = new javax.swing.GroupLayout(cpu2Information);
        cpu2Information.setLayout(cpu2InformationLayout);
        cpu2InformationLayout.setHorizontalGroup(
            cpu2InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpu2InformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cpu2InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cpu2InformationLayout.createSequentialGroup()
                        .addGroup(cpu2InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cpu2timeRemainingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CPU_Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addComponent(cpu2processExecuting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        cpu2InformationLayout.setVerticalGroup(
            cpu2InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpu2InformationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CPU_Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpu2processExecuting, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpu2timeRemainingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        timeUnitLabel_ms.setText("ms");

        timeUnitTextField.setBackground(new java.awt.Color(204, 204, 204));
        timeUnitTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeUnitTextField.setText("1000");
        timeUnitTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        timeUnitTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeUnitTextFieldActionPerformed(evt);
            }
        });

        timeUnitLabel.setText("1 time unit =");

        completedProcesses_cpu1.setBackground(new java.awt.Color(204, 204, 204));
        completedProcesses_cpu1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        completedProcesses_cpu1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Process Name", "Arrival Time", "Service Time", "Finish Time", "TAT", "nTAT"
            }
        ));
        completedProcesses_cpu1.setGridColor(new java.awt.Color(0, 0, 0));
        completedProcesses_cpu1.setRowHeight(30);
        jScrollPane4.setViewportView(completedProcesses_cpu1);

        errorMessage.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        errorMessage.setForeground(new java.awt.Color(255, 0, 0));

        currentnTAT_cpu2.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        currentnTAT_cpu2.setText("Current Average nTAT:");

        quantumInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantumInput.setText("2");
        quantumInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantumInputActionPerformed(evt);
            }
        });

        quantumLabel.setText("quantum");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(currentnTAT_cpu2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(uploadFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(currentnTAT_cpu1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(waitingProcessQueueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(errorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)
                                        .addComponent(currentSystemState)
                                        .addGap(66, 66, 66)
                                        .addComponent(timeUnitLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeUnitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeUnitLabel_ms)
                                        .addGap(33, 33, 33)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(waitingProcessQueueLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cpu2Information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(quantumInput, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(quantumLabel))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeUnitLabel)
                    .addComponent(timeUnitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeUnitLabel_ms)
                    .addComponent(startButton)
                    .addComponent(pauseButton)
                    .addComponent(currentSystemState)
                    .addComponent(errorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(waitingProcessQueueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(waitingProcessQueueLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cpu2Information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(quantumInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(quantumLabel))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentnTAT_cpu1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uploadFileButton)
                    .addComponent(currentnTAT_cpu2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean isPaused(){
        return pause;
    }
    
    private void timeUnitTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeUnitTextFieldActionPerformed
        this.time = Integer.parseInt(timeUnitTextField.getText());
    }//GEN-LAST:event_timeUnitTextFieldActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        pause = true;
        // set the text to paused
        currentSystemState.setText("System Paused");
          
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        if (file.isEmpty() == false) {
            pause = false;
            // set label to running
            currentSystemState.setText("System Running");
            errorMessage.setText("");

            // if start button has been pushed less than once
            if (startButtonCounter < 1) {
                // load the data
                loadIT();

            } else {
                // if start button is being pressed to resume the operation
                // notify all CPUs, and set their time values in case it was changed while the system was paused
                synchronized (cpu1) {
                    cpu1.notify();
                }
                synchronized (cpu2) {
                    cpu2.notify();
                }
            }
            startButtonCounter++;
        }
        else {
                errorMessage.setText("Upload file first.");
        }
    }//GEN-LAST:event_startButtonActionPerformed

    
    
    private void uploadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileButtonActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        if (evt.getSource() == uploadFileButton) {
            int returnVal = fc.showOpenDialog(fc);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                //This is where a real application would open the file.
                this.file = file.getAbsolutePath();
                System.out.println("Opening: " + file.getAbsolutePath() + ".");
            } else {
                System.out.println("Open command cancelled by user.");
            }
        }
    }//GEN-LAST:event_uploadFileButtonActionPerformed

    private void quantumInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantumInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantumInputActionPerformed

    public int getTime(){
        return time;
    }   
    
    /**
     * @param args the command line arguments
     */
    public static void main() throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);        

            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel CPU_Label;
    public javax.swing.JLabel CPU_Label1;
    public javax.swing.JLabel CPU_Label2;
    public javax.swing.JTable completedProcesses_cpu1;
    public javax.swing.JTable completedProcesses_cpu2;
    private javax.swing.JPanel cpu1Information;
    public javax.swing.JLabel cpu1processExecuting;
    public javax.swing.JLabel cpu1timeRemainingLabel;
    private javax.swing.JPanel cpu2Information;
    public javax.swing.JLabel cpu2processExecuting;
    public javax.swing.JLabel cpu2timeRemainingLabel;
    public javax.swing.JLabel currentSystemState;
    public javax.swing.JLabel currentnTAT_cpu1;
    public javax.swing.JLabel currentnTAT_cpu2;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JButton pauseButton;
    public javax.swing.JTextField quantumInput;
    private javax.swing.JLabel quantumLabel;
    public javax.swing.JTable queueTable_cpu1;
    public javax.swing.JTable queueTable_cpu2;
    public javax.swing.JButton startButton;
    private javax.swing.JLabel timeUnitLabel;
    private javax.swing.JLabel timeUnitLabel_ms;
    public javax.swing.JTextField timeUnitTextField;
    private javax.swing.JButton uploadFileButton;
    private javax.swing.JLabel waitingProcessQueueLabel;
    private javax.swing.JLabel waitingProcessQueueLabel1;
    // End of variables declaration//GEN-END:variables
}
